Next.js offers three main ways to fetch data:

1. getStaticProps: fetched data at build time; ideal for pages that don't need to be updated frequently aka Static Site Generation (SSG) - since the content is pre-rendered, it's optimized for SEO and loads quickly.

    example:
        export async function getStaticProps(context) [
            const { id } = context.params;
            const res = await fetch(`https://api.example.com/blog/${id}`);
            const post = await res.json()

            return {
                props: { post }
            }
        ]


        Dynamic routes with getStaticPaths: when using getStaticProps with dynamic routes, you also need getStaticPaths to specify which paths to pre-render,

        export async function getStaticPaths() {
            const res = await fetch('https://api.example.com/blog');
            const posts = await res.json();

            const paths = posts.map(((post) => {
                params: {id: post.id.toString()},
            }));

            return { paths, fallback: false };
        }

2. getServerSideProps: fetched data at each request; ideal for pages that need fresh data on every visit

        Server-Side Rendering with getServerSideProps
        What It Does: getServerSideProps runs on every request, fetching data on the server before rendering and sending it to the client.
        Use Cases: Best for pages that need to show the latest data on every request, like dashboards, news feeds, and user-specific pages.
        SEO Benefits: Since content is pre-rendered on the server, itâ€™s also SEO-friendly.


3. Client-Side Fetching: fetch data after the initial page load; ideal for user-interactive elements where data doesn't need to be rendered on the server (i.e. fetching comments or search results)