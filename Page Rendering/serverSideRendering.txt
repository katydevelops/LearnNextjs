Server Side Rendering

    Server components allow you to build part of your app's UI on the server - this is super powerful because it lets you take advantage of server-side benefits like fetching data directly from the source, keeping sensitive information secure and reducing the load on the client's browser.

    When you visit an SSR page, the server runs the component on the server, generates the HTML and sends it to the client. The browser receives the fully rendered HTML and displays it immediately which is why SSR can feel faster for the user.

    
    PROs of Server Components:
    - Fewer Network Requests: when you fetch data on the server, you can grab everything you need in one go - you app doesn't need to make multiple trips between the client and server (aka waterfalls) - this speeds things up can can have faster initial loads.

    - SEO Friendly - search engines can index the content more easily because the HTML is fully populated.

    - Security: By fetching data on the server, you keep sensitive info like API keys and access tokens hidden. If you were to do this on the client side, there's a risk someone could intercept those details. Servers typically use secure protocols like SSH and VPNs. Servers are also typically behind firewalls and network security measures making it harder for hackers to reach them whereas clients are exposed to the internet. 

    - Reduced Latency: especially for server and databases in the same or close regions. The closer the server and database are to each other, the quicker the data can transmit over physical infrastructure like wires and fiber optic cables.

    - Caching and Revalidation: server controls have direct control over caching mechanisms, allowing for more efficient and fine-grained caching strategies. Server components can store cached data in server-side memory or storage, reducing the need for client-side storage and minimizing data transfers. Server components can easily revalidate cached data by checking the server-side data source. After the HTML is rendered, the JS file (bundle.js) is loaded and the page is 'hydrated'. Hydration is the process where a framework (such as React) takes over the server-rendered HTML, attaching event handlers and making the page interactive. After hydration, the page behaves just like a CSR page - the virtual DOM is in place and any interactions will update the UI by modifying the virtual DOM and then the real DOM.