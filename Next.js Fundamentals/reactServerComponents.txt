React Server Components in Next.js

Next.js Server Components = React Server Components integrated into  Next.js. They render on the server, don't get sent to the client as JavaScript and are ideal for static or non-interactive parts of the UI.

RSC are a way to allow parts of a React app to be rendered on the server. When user requests a page, the server processes these components, sends the HTML to the client, and then hydrates any interactive components as needed.

With RSCs, you can separate non-interactive parts of an app from interactive components, only sending what is necessary to the client. This improves load times and reduces the amount of JS your browser has to process.

The benefits of Reach Server Components are: better performance through reducing the amount of JS that needs to be sent to the client, optimized data fetching as RSC can fetch data directly from a database or API without exposing any credentials or adding any additional API layers and SEO-friendliness. 

In Next.js - components in the app directory are Server Components by default - this means Next.js will automatically render them on the sever unless you specify otherwise. Server components can use async/await directly which wouldn't be possible in a client component. 

RSCs allow you to render components entirely on the server - this approach reduces the JS that needs to be loaded on the client as RSCs are never sent to the client as JavaScript. They work best with non-interactive components aka those that don't need client-side state or lifecycle hooks like useState and useEffect.

RSCs are different than traditional SSR like Next.js or custom Express setup as these methods render the whole page on the server (including both interactive and non-interactive parts) then hydrates the page on the client so it becomes fully interactive. Hydration requires loading the JS on the client to make that page interactive after it loads so it often increases the bundle size compared to the RSC alone

RSCs require a backend environment to render the components and fetch data, which typically involves having a Node.js server running. Frameworks like Next.js provide an environment where both RSCs and traditional SSR/SSG method coexist seamlessly. Without Next.js you would need to set up a server environment like Express or a custom Node server if you want to use RSCs in a standard React app.

Next.js supports multiple types of rendering, not just RSC:
    - Server-Side Rendering (SSR): each request is rendered on the server before being sent to the client, making it ideal for pages that need frequently updated data
        use getServerSideProps for SSR

    - Static Site Generation (SSG): pages are pre-rendered at build time, serving as static files. This is great for pages with content that rarely changes. SSG is perfect for content that doesn’t change often, such as blog posts, marketing pages, or documentation.

        use getStaticProps for SSG

    - Incremental Static Regeneration (ISR): allow static pages to be updated periodically without a full rebuild, combining the benefits of SSG with dynamic content capabilities. ISR is great for pages that mostly remain static but need occasional updates, like product catalogs or news pages.

        use getStaticPaths for dynamic SSG and ISR

    - Client-Side Rendering (CSR): for highly interactive parts of the app, you can render components fully on the client side. It’s useful for highly interactive sections of an app or for pages where data doesn’t need to be server-rendered for SEO.

    In Next.js, you can mix Server and Client Components within the same app, making it possible to render non-interactive content on the server while keeping interactive content on the client. This gives you control over performance by optimizing when and where JavaScript is loaded.

